@page "/yaml-to-json"
@using System.Text.Json
@using System.Text.Json.Serialization
@using YamlDotNet.Serialization
@using System.IO

<h1>Yaml to Json</h1>

<textarea class="form-control code" @bind="text"></textarea>

<div>
    <button class="btn btn-primary" @onclick="ToJson">Convert to JSON</button>
</div>

@if (result != null)
{
    <pre class="result">@result</pre>
}

@code {

    string text = @"scalar: a scalar
scalar: 1
sequence:
  - one
  - two
";

    string result;

    readonly JsonSerializerOptions indentedSerializerOptions = new()
    {
        WriteIndented = true,
        Converters = {new DictionaryObjectConverter()}
    };

    void ToJson()
    {
        try
        {
            var deserializer = new Deserializer();
            using var sr = new StringReader(text);
            var yamlObject = deserializer.Deserialize(sr);

            result = JsonSerializer.Serialize(yamlObject, indentedSerializerOptions);
        }
        catch (Exception ex)
        {
            result = ex.Message;
        }
    }

    class DictionaryObjectConverter : JsonConverter<Dictionary<object, object>>
    {
        public override Dictionary<object, object> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            throw new NotSupportedException();
        }

        public override void Write(Utf8JsonWriter writer, Dictionary<object, object> value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
            }
            else
            {
                writer.WriteStartObject();
                foreach (var kvp in value)
                {
                    var propertyName = $"{kvp.Key}";
                    writer.WritePropertyName(propertyName);
                    JsonSerializer.Serialize(writer, kvp.Value, options);
                }

                writer.WriteEndObject();
            }
        }
    }

}