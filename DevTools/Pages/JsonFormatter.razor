@page "/json-formatter"
@using System.Text.Json
@inject ClipboardService _clipboardService

<h2>JSON Formatter</h2>

<div>
    <textarea class="form-control code" rows="10" @bind="_text"></textarea>
</div>

<div class="mt-2 mb-3">
    <button class="btn btn-primary" @onclick="() => Format(true)">Format</button>
    <button class="btn btn-primary" @onclick="() => Format(false)">Minify</button>
</div>

@if (_result != null)
{
    <div class="mt-2 d-flex justify-content-end">
        <button class="btn btn-success btn-sm" @onclick="Copy">@_copyText</button>
    </div>

    <pre class="result">@_result</pre>
}

@code {
    string _text;
    string _result;
    string _copyText = "Copy";

    readonly JsonSerializerOptions _indentedSerializerOptions = new() {WriteIndented = true};

    void Format(bool indented)
    {
        if (string.IsNullOrEmpty(_text)) return;

        try
        {
            _copyText = "Copy";

            var doc = JsonDocument.Parse(_text, new JsonDocumentOptions {AllowTrailingCommas = true, CommentHandling = JsonCommentHandling.Skip, MaxDepth = 1000});
            _result = JsonSerializer.Serialize(doc, indented ? _indentedSerializerOptions : null);
        }
        catch (Exception ex)
        {
            _result = ex.Message;
        }
    }

    async Task Copy()
    {
        try
        {
            await _clipboardService.WriteTextAsync(_result);
            _copyText = "Copied";
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }

}