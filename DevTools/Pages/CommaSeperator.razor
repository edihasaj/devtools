@page "/comma-separator"
@inject ClipboardService _clipboardService

<h1>Comma Separator</h1>

<div class="row">
    <div class="col-7">
        <textarea class="form-control code" @bind="_text" rows="10"></textarea>
    </div>

    <div class="col-4">
        <h6>Options: </h6>

        <div class="mb-2 d-flex align-items-center">
            <input id="separator-character" class="w-25 form-control mr-2" type="text"
                   @bind="_separator">
            <label for="separator-character" class="mb-0">Separator Character</label>
        </div>

        <div class="mb-2 d-flex align-items-center">
            <input id="include-space" class="mr-2" type="checkbox"
                   @bind="_includeSpace">
            <label for="include-space" class="mb-0">Include Space</label>
        </div>

        @foreach (var item in new[] {"Double Quote", "Single Quote", "No Quote"})
        {
            <div>
                <input type="radio" name="quote-character" id="@item" value="@item" @onchange="RadioSelection"
                       checked=@(_radioValue.Equals(item, StringComparison.OrdinalIgnoreCase))/>
                <label for="@item">@item</label>
            </div>
        }
    </div>
</div>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="Convert">Convert</button>
</div>

@if (_result != null)
{
    <div class="mt-2 d-flex justify-content-end">
        <button class="btn btn-success btn-sm" @onclick="Copy">@_copyText</button>
    </div>

    <pre class="result">@_result</pre>
}

@code {
    string _text;
    string _result;
    string _separator = ",";
    string _radioValue = "Double Quote";
    bool _includeSpace = true;
    string _copyText = "Copy";

    void RadioSelection(ChangeEventArgs args)
    {
        if (args.Value != null) _radioValue = args.Value.ToString();
    }

    void Convert()
    {
        if (string.IsNullOrEmpty(_text)) return;

        try
        {
            _copyText = "Copy";

            _text = _text.Replace(Environment.NewLine, " ");
            var tEnumerable = _text.Split(" ");
            _result = _radioValue switch
            {
                "Double Quote" => string.Join(string.Concat(_separator.Trim(), _includeSpace ? " " : ""),
                    tEnumerable.Where(c => c.Trim().Length >= 1).Select(c => $"\"{c}\"")),
                "Single Quote" => string.Join(string.Concat(_separator.Trim(), _includeSpace ? " " : ""),
                    tEnumerable.Where(c => c.Trim().Length >= 1).Select(c => $"\'{c}\'")),
                "No Quote" => string.Join(string.Concat(_separator.Trim(), _includeSpace ? " " : ""),
                    tEnumerable.Where(c => c.Trim().Length >= 1)),
                _ => _result
                };
        }
        catch (Exception ex)
        {
            _result = ex.Message;
        }
    }

    async Task Copy()
    {
        try
        {
            await _clipboardService.WriteTextAsync(_result);
            _copyText = "Copied";
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }

}